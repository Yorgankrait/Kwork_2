version: "2"

services:
  nginx:
    restart: always
    image: nginx:1.23-alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      #- static_volume:/app/backend/static
      - logs_volume:/app/backend/logs
      - upload_volume:/app/backend/upload
      - ./backend/static:/app/backend/static
      - /etc/letsencrypt:/etc/letsencrypt
      - ./front:/var/www/html
  server:
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: ./Dockerfile

    volumes:
      - logs_volume:/app/backend/logs
      - upload_volume:/backend/upload
      - ./static:/app/backend/static
    user: root

    command: >
      sh -c "python manage.py collectstatic --noinput &&
            python manage.py migrate &&
            gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2"
    expose:
      - 8000

    environment:
      DEBUG: "True"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
      DJANGO_DB: postgresql
      POSTGRES_HOST: db
      POSTGRES_NAME: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432

    depends_on:
      - db

  worker:
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: ./Dockerfile

    command: celery -A backend worker --loglevel=info

    volumes:
      - logs_volume:/app/backend/logs
      - upload_volume:/backend/upload
      - static_volume:/app/backend/django_static

    environment:
      DEBUG: "True"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
      DJANGO_DB: postgresql
      POSTGRES_HOST: db
      POSTGRES_NAME: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432

    depends_on:
      - server
      - redis

  celery-beat:
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: ./Dockerfile

    command: celery -A backend beat --loglevel=info -s /tmp/celerybeat-schedule

    volumes:
      - logs_volume:/app/backend/logs
      - upload_volume:/app/backend/upload
      - static_volume:/app/backend/django_static

  redis:
    restart: unless-stopped
    image: redis:7.0.5-alpine
    expose:
      - 6379

  db:
    image: postgres:13.0-alpine
    restart: unless-stopped
    volumes:
      - postgres_data_v2:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    expose:
      - 5432

volumes:
  static_volume: {}
  logs_volume: {}
  upload_volume: {}
  postgres_data_v2: {}  
  tmp_volume: {}
